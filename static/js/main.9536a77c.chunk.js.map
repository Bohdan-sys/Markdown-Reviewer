{"version":3,"sources":["TopPanel.js","Editor.js","instruction.js","Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["TopPanel","heading","toggleFullScreen","screen","useState","showMode","setShowMode","className","icon","onClick","Editor","addText","text","setText","setScreen","useEffect","bind","name","id","placeholder","value","onChange","e","target","Previewer","dangerouslySetInnerHTML","__html","marked","breaks","library","add","fas","fab","App","inputText","setInputText","val","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yPAsCeA,EAlCE,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,iBAA+B,KAAbC,OAEXC,sBAFwB,mBAEjDC,EAFiD,KAEvCC,EAFuC,KASxD,OACI,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,wBAAf,UACI,qBAAKA,UAAU,eAAf,SACI,qBAAIA,UAAU,8CAAd,UACI,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,kBAAmBD,UAAU,2BAC3DN,OAGT,qBAAKM,UAAU,eAAf,SACI,wBAAQA,UAAU,SACdE,QAAS,WAfzBH,GAAaD,GACbH,KAaY,SAEKG,EACG,cAAC,IAAD,CAAiBG,KAAM,CAAC,MAAO,uBAAwBD,UAAU,qBAC/D,cAAC,IAAD,CAAiBC,KAAM,CAAC,MAAO,qBAAsBD,UAAU,+B,SCS9EG,EAhCA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACJP,mBCLX,ymCDIe,mBACrBQ,EADqB,KACfC,EADe,OAEAT,oBAAS,GAFT,mBAErBD,EAFqB,KAEbW,EAFa,KAO5BC,qBAAU,WACNJ,EAAQC,MASZ,OACI,sBAAKL,UAAS,iBAAYJ,EAAS,GAAK,aAAxC,UACI,cAAC,EAAD,CAAUF,QAAQ,SAASC,iBAfhB,WACfY,GAAWX,IAciDa,KAAK,KAC7D,8BACI,0BAAUC,KAAK,SAASC,GAAG,SAASC,YAAY,0BAA0BC,MAAOR,EAAML,UAAS,uBAAkBJ,EAAS,GAAK,aAC5HkB,SAVS,SAACC,GACtBT,EAAQS,EAAEC,OAAOH,OACjBT,EAAQW,EAAEC,OAAOH,QAQsBJ,KAAK,W,gBEArCQ,EArBG,SAAC,GAAc,IAAZZ,EAAW,EAAXA,KAAW,EACAR,oBAAS,GADT,mBACrBD,EADqB,KACbW,EADa,KAK5B,OACI,sBAAKP,UAAS,oBAAeJ,EAAS,GAAK,aAA3C,UACI,cAAC,EAAD,CAAUF,QAAQ,YAAYC,iBALnB,WACfY,GAAWX,IAIoDa,K,aAC3D,qBAAKT,UAAS,0BAAqBJ,EAAS,GAAK,aAAee,GAAG,UAC/DO,wBAAyB,CAAEC,OAAQC,IAAOf,EAAM,CAAEgB,QAAQ,W,uBCJ1EC,IAAQC,IAAIC,IAAKC,KAiBFC,MAdf,WAAgB,IAAD,EACqB7B,mBAAS,IAD9B,mBACN8B,EADM,KACKC,EADL,KAMb,OACE,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,CAAQI,QALG,SAACyB,GACdD,EAAaC,MAKX,cAAC,EAAD,CAAWxB,KAAMsB,QCVRG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9536a77c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\n\r\nconst TopPanel = ({ heading, toggleFullScreen, screen }) => {\r\n\r\n    const [showMode, setShowMode] = useState();\r\n\r\n    const changeState = () => {\r\n        setShowMode(!showMode)\r\n        toggleFullScreen()\r\n    }\r\n\r\n    return (\r\n        <div className='top-panel'>\r\n            <div className='row row--align_center'>\r\n                <div className='cell cell--8'>\r\n                    <h1 className='caption caption--size_5 caption--font_russo'>\r\n                        <FontAwesomeIcon icon={['fab', 'free-code-camp']} className=\"icon icon-freeCodeCamp\" />\r\n                        {heading}\r\n                    </h1>\r\n                </div>\r\n                <div className='cell cell--4'>\r\n                    <button className='button'\r\n                        onClick={() => { changeState() }}>\r\n                        {showMode ?\r\n                            <FontAwesomeIcon icon={['fas', 'compress-arrows-alt']} className=\"icon icon-arrows\" />\r\n                            : <FontAwesomeIcon icon={['fas', 'expand-arrows-alt']} className=\"icon icon-arrows\" />}\r\n                    </button>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopPanel\r\n","import React, { useState, useEffect } from 'react';\r\nimport TopPanel from './TopPanel'\r\nimport instruction from './instruction'\r\n\r\nconst Editor = ({ addText }) => {\r\n    const [text, setText] = useState(instruction)\r\n    const [screen, setScreen] = useState(true)\r\n\r\n    const fullScreen = () => {\r\n        setScreen(!screen)\r\n    }\r\n    useEffect(() => {\r\n        addText(text)\r\n    }\r\n\r\n    )\r\n    const handleTextChange = (e) => {\r\n        setText(e.target.value)\r\n        addText(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className={`editor ${screen ? '' : 'is-active'}`}>\r\n            <TopPanel heading=\"Editor\" toggleFullScreen={fullScreen.bind(this)} />\r\n            <div>\r\n                <textarea name=\"editor\" id=\"editor\" placeholder=\"Enter your code here...\" value={text} className={`editor__text ${screen ? '' : 'is-active'}`}\r\n                    onChange={handleTextChange.bind(this)}\r\n                >\r\n                </textarea>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Editor","const instruction = `# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div> \\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n\r\n`;\r\nexport default instruction","import React, { useState } from 'react';\r\n// import parse from 'html-react-parser';\r\nimport TopPanel from './TopPanel';\r\nimport marked from 'marked'\r\n\r\nconst Previewer = ({ text }) => {\r\n    const [screen, setScreen] = useState(true)\r\n    const fullScreen = () => {\r\n        setScreen(!screen)\r\n    }\r\n    return (\r\n        <div className={`previewer ${screen ? '' : 'is-active'}`}>\r\n            <TopPanel heading=\"Previewer\" toggleFullScreen={fullScreen.bind(this)} />\r\n            <div className={`previewer__text ${screen ? '' : 'is-active'}`} id=\"preview\"\r\n                dangerouslySetInnerHTML={{ __html: marked(text, { breaks: true }) }}\r\n            >\r\n\r\n                {/* {parse(marked(text, { sanitize: true }))} */}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Previewer","\nimport './sass/App.sass';\nimport React, { useState } from 'react';\n// import QuoteTemplate from './QuoteTemplate';\nimport Editor from './Editor'\nimport Previewer from './Previewer'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fas, fab);\n\n\nfunction App() {\n  const [inputText, setInputText] = useState('')\n\n  const update = (val) => {\n    setInputText(val)\n  }\n  return (\n    <div className='App'>\n      <Editor addText={update} />\n      <Previewer text={inputText} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}